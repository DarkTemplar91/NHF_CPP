<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_storage" xml:lang="en-US">
<title>Storage Class Reference</title>
<indexterm><primary>Storage</primary></indexterm>
<para>

<para>Base class for data storage/memory </para>
 
</para>
<para>
<computeroutput>#include &lt;Memory.h&gt;</computeroutput>
</para>
Inheritance diagram for Storage:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_storage__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for Storage:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_storage__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_storage_1aa557b155d438649718b658971c097859">Storage</link> (const <link linkend="_class_storage">Storage</link> &amp;m)</para>

<para>Unit of capacity. </para>
</listitem>
            <listitem><para><link linkend="_class_storage_1a51e13f81461a42036b877f158d6c807b">Storage</link> (size_t c=1, <link linkend="__memory_8h_1a284499ae529838dbabf4c7a520e99a85">ByteUnit</link> bu=<link linkend="__memory_8h_1a284499ae529838dbabf4c7a520e99a85af9deabc33a5630ffb405bb42d7cff365">ByteUnit::gigabyte</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_storage_1af1098adcb33fd74e57cd855514014b73">Storage</link> (std::string <link linkend="_class_product_1a6f88e6ff8cb26b1cce49a41e72e4fcb8">name</link>, double <link linkend="_class_product_1abb2572df7a832a509944905603ba5e4f">price</link>, std::string descript, std::string manuf, size_t c, <link linkend="__memory_8h_1a284499ae529838dbabf4c7a520e99a85">ByteUnit</link> bu)</para>
</listitem>
            <listitem><para>size_t <link linkend="_class_storage_1acdb19059f3115eceb8cb420b18658440">getCapacity</link> () const</para>
</listitem>
            <listitem><para><link linkend="__memory_8h_1a284499ae529838dbabf4c7a520e99a85">ByteUnit</link> <link linkend="_class_storage_1af6dc4a84e1566ab8103623214eee2671">getSizeType</link> () const</para>

<para>Returns capacity. </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_storage_1a3836c9fff79b96e8c87ab8a5976d89f8">getNotation</link> () const</para>

<para>Returns the unit type. </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_storage_1a598d2e8f3fcd8caf5d3042ddecd4896e">serializeObj</link> () const</para>

<para>Return notation in string. </para>
</listitem>
            <listitem><para>void <link linkend="_class_storage_1a73df5f67fd76f334e3511b2850882974">print</link> ()</para>

<para>Serializes object. </para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_storage_1ab10853458f897082ba028cef2477005d">operator==</link> (<link linkend="_class_storage">Storage</link> &amp;rhs)</para>
</listitem>
            <listitem><para>virtual bool <link linkend="_class_storage_1ac44ec07b755c2a60f976cbd7ae13de81">operator!=</link> (<link linkend="_class_storage">Storage</link> &amp;rhs)</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_storage">Storage</link> * <link linkend="_class_storage_1af7f626e3a0bc9d46c59ef7dd8f57c6c9">clone</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>size_t <link linkend="_class_storage_1aae754660623b8e0e5046b967cb4cdb73">capacity</link></para>
</listitem>
            <listitem><para><link linkend="__memory_8h_1a284499ae529838dbabf4c7a520e99a85">ByteUnit</link> <link linkend="_class_storage_1a58275af4fc94f89edd8af0721aea467e">notation</link></para>

<para>Capacity of storage. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Base class for data storage/memory </para>


</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_storage_1aa557b155d438649718b658971c097859"/>    <section>
    <title>Storage()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>Storage</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>Storage</secondary></indexterm>
<para><computeroutput>Storage::Storage (const <link linkend="_class_storage">Storage</link> &amp; m)</computeroutput></para><para>

<para>Unit of capacity. </para>
</para>
    </section><anchor xml:id="_class_storage_1a51e13f81461a42036b877f158d6c807b"/>    <section>
    <title>Storage()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>Storage</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>Storage</secondary></indexterm>
<para><computeroutput>Storage::Storage (size_t c = <computeroutput>1</computeroutput>
, <link linkend="__memory_8h_1a284499ae529838dbabf4c7a520e99a85">ByteUnit</link> bu = <computeroutput><link linkend="__memory_8h_1a284499ae529838dbabf4c7a520e99a85af9deabc33a5630ffb405bb42d7cff365">ByteUnit::gigabyte</link></computeroutput>
)</computeroutput></para>    </section><anchor xml:id="_class_storage_1af1098adcb33fd74e57cd855514014b73"/>    <section>
    <title>Storage()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>Storage</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>Storage</secondary></indexterm>
<para><computeroutput>Storage::Storage (std::string name, double price, std::string descript, std::string manuf, size_t c, <link linkend="__memory_8h_1a284499ae529838dbabf4c7a520e99a85">ByteUnit</link> bu)</computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_storage_1af7f626e3a0bc9d46c59ef7dd8f57c6c9"/>    <section>
    <title>clone()</title>
<indexterm><primary>clone</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>clone</secondary></indexterm>
<para><computeroutput><link linkend="_class_storage">Storage</link> * Storage::clone ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Reimplemented from <link linkend="_class_product_1a2cc3f5ef8abe14801e185734cfcc3b57">Product</link>.</para>
<para>
Reimplemented in <link linkend="_class_s_s_d_1adfbc00ab863bca1aff44b3ff233b5255">SSD</link>, <link linkend="_class_h_d_d_1a434ff76ba146d2e143f2c6803ca73a67">HDD</link>, and <link linkend="_class_r_a_m_1a2dbd94dada94130817a298b91023e4c9">RAM</link>.</para>
    </section><anchor xml:id="_class_storage_1acdb19059f3115eceb8cb420b18658440"/>    <section>
    <title>getCapacity()</title>
<indexterm><primary>getCapacity</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>getCapacity</secondary></indexterm>
<para><computeroutput>size_t Storage::getCapacity ( ) const</computeroutput></para>    </section><anchor xml:id="_class_storage_1a3836c9fff79b96e8c87ab8a5976d89f8"/>    <section>
    <title>getNotation()</title>
<indexterm><primary>getNotation</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>getNotation</secondary></indexterm>
<para><computeroutput>std::string Storage::getNotation ( ) const</computeroutput></para><para>

<para>Returns the unit type. </para>
</para>
    </section><anchor xml:id="_class_storage_1af6dc4a84e1566ab8103623214eee2671"/>    <section>
    <title>getSizeType()</title>
<indexterm><primary>getSizeType</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>getSizeType</secondary></indexterm>
<para><computeroutput><link linkend="__memory_8h_1a284499ae529838dbabf4c7a520e99a85">ByteUnit</link> Storage::getSizeType ( ) const</computeroutput></para><para>

<para>Returns capacity. </para>
</para>
    </section><anchor xml:id="_class_storage_1ac44ec07b755c2a60f976cbd7ae13de81"/>    <section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Storage::operator!= (<link linkend="_class_storage">Storage</link> &amp; rhs)<computeroutput>[virtual]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_storage_1ab10853458f897082ba028cef2477005d"/>    <section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Storage::operator== (<link linkend="_class_storage">Storage</link> &amp; rhs)<computeroutput>[virtual]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_storage_1a73df5f67fd76f334e3511b2850882974"/>    <section>
    <title>print()</title>
<indexterm><primary>print</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>print</secondary></indexterm>
<para><computeroutput>void Storage::print ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Serializes object. </para>
</para>
<para>
Reimplemented from <link linkend="_class_product_1a82a40e1860ffe2c88ea08084037a6c42">Product</link>.</para>
<para>
Reimplemented in <link linkend="_class_s_s_d_1a753647f5a39c66e794efd6fed291795b">SSD</link>, <link linkend="_class_h_d_d_1ab80de8626bc38aa1d3398121b159717e">HDD</link>, and <link linkend="_class_r_a_m_1a1424aff28af127d0ae7b343c01c1df1d">RAM</link>.</para>
    </section><anchor xml:id="_class_storage_1a598d2e8f3fcd8caf5d3042ddecd4896e"/>    <section>
    <title>serializeObj()</title>
<indexterm><primary>serializeObj</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>serializeObj</secondary></indexterm>
<para><computeroutput>std::string Storage::serializeObj ( ) const<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Return notation in string. </para>
</para>
<para>
Reimplemented from <link linkend="_class_product_1a749f163f9319f2cf6e9e0620d7133f0b">Product</link>.</para>
<para>
Reimplemented in <link linkend="_class_s_s_d_1a0ed308b29e11e06c4c8b84fcab515c4a">SSD</link>, <link linkend="_class_h_d_d_1ad64f75db764118f6e47eafd5c6bc9bdc">HDD</link>, and <link linkend="_class_r_a_m_1a15ab2492102ae822e8ea760f9613b543">RAM</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_storage_1aae754660623b8e0e5046b967cb4cdb73"/>    <section>
    <title>capacity</title>
<indexterm><primary>capacity</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>capacity</secondary></indexterm>
<para><computeroutput>size_t Storage::capacity<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_class_storage_1a58275af4fc94f89edd8af0721aea467e"/>    <section>
    <title>notation</title>
<indexterm><primary>notation</primary><secondary>Storage</secondary></indexterm>
<indexterm><primary>Storage</primary><secondary>notation</secondary></indexterm>
<para><computeroutput><link linkend="__memory_8h_1a284499ae529838dbabf4c7a520e99a85">ByteUnit</link> Storage::notation<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Capacity of storage. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
C:/Users/szasz/Desktop/Egyetem/Prog2/HF/NHF/NHF/NHF/<link linkend="__memory_8h">Memory.h</link>C:/Users/szasz/Desktop/Egyetem/Prog2/HF/NHF/NHF/NHF/<link linkend="__memory_8cpp">Memory.cpp</link></section>
</section>
